app [main] { pf: platform "https://github.com/roc-lang/basic-cli/releases/download/0.15.0/SlwdbJ-3GR7uBWQo6zlmYWNYOxnvo8r6YABXD-45UOw.tar.br" }

import pf.File
import pf.Arg
import "data/NormalizationTest.txt" as file : Str
import Helpers
#import pf.Stdout

template =
    """
    ## WARNING: This file is automatically generated. Do not edit it manually. ##
    app [main] { pf: platform "https://github.com/roc-lang/basic-cli/releases/download/0.15.0/SlwdbJ-3GR7uBWQo6zlmYWNYOxnvo8r6YABXD-45UOw.tar.br" }


    import CodePoint exposing [CodePoint]
    import pf.Stdout
    import pf.Utc
    import Normalization
    import Helpers

    convertedU32 : U32 -> CodePoint
    convertedU32 = \\cp ->
        when CodePoint.fromU32 cp is
        Ok x -> x
        Err _ -> crash "Invalid code point!"

    converted : List U32 -> List CodePoint
    converted = \\cps ->
        List.map cps convertedU32

    equalCodePoints : List CodePoint, List CodePoint -> Bool
    equalCodePoints = \\cp1, cp2 ->
        when (cp1, cp2) is
        ([], []) -> Bool.true
        ([h1, .. as t1], [h2, .. as t2]) if (CodePoint.toU32 h1) == (CodePoint.toU32 h2) ->
            equalCodePoints t1 t2
        _ -> Bool.false

    #doTest : (U64, {nfc: List U32, nfd: List U32, nfkd: List U32, nfkc: List U32}) -> Task {} *
    doTest = \\(index, {source: sourceR, nfc: nfcR, nfd: nfdR, nfkd: nfkdR, nfkc: nfkcR}) ->
        nfc = converted nfcR
        nfd = converted nfdR
        nfkd = converted nfkdR
        nfkc = converted nfkcR
        source = converted sourceR

        start = Utc.now! {}
        nfc1 = Normalization.codePointsToNFC source
        nfc2 = Normalization.codePointsToNFC nfc
        nfc3 = Normalization.codePointsToNFC nfd
        nfc4 = Normalization.codePointsToNFC nfkd
        nfc5 = Normalization.codePointsToNFC nfkc

        nfd1 = Normalization.codePointsToNFD source
        nfd2 = Normalization.codePointsToNFD nfc
        nfd3 = Normalization.codePointsToNFD nfd
        nfd4 = Normalization.codePointsToNFD nfkd
        nfd5 = Normalization.codePointsToNFD nfkc

        nfkd1 = Normalization.codePointsToNFKD source
        nfkd2 = Normalization.codePointsToNFKD nfc
        nfkd3 = Normalization.codePointsToNFKD nfd
        nfkd4 = Normalization.codePointsToNFKD nfkd
        nfkd5 = Normalization.codePointsToNFKD nfkc
        stop = Utc.now! {}

        nfkc1 = Normalization.codePointsToNFKC source
        nfkc2 = Normalization.codePointsToNFKC nfc
        nfkc3 = Normalization.codePointsToNFKC nfd
        nfkc4 = Normalization.codePointsToNFKC nfkd
        nfkc5 = Normalization.codePointsToNFKC nfkc


        # NFC
        #      c2 ==  toNFC(c1) ==  toNFC(c2) ==  toNFC(c3)
        #      c4 ==  toNFC(c4) ==  toNFC(c5)
        nfcResult =
            equalCodePoints nfc1 nfc &&
            equalCodePoints nfc2 nfc &&
            equalCodePoints nfc3 nfc &&
            equalCodePoints nfc4 nfkc &&
            equalCodePoints nfc5 nfkc

        #    NFD
        #      c3 ==  toNFD(c1) ==  toNFD(c2) ==  toNFD(c3)
        #      c5 ==  toNFD(c4) ==  toNFD(c5)
        nfdResult =
            equalCodePoints nfd1 nfd &&
            equalCodePoints nfd2 nfd &&
            equalCodePoints nfd3 nfd &&
            equalCodePoints nfd4 nfkd &&
            equalCodePoints nfd5 nfkd

        #    NFKD
        #      c4 == toNFKD(c1) == toNFKD(c2) == toNFKD(c3) == toNFKD(c4) == toNFKD(c5)
        nfkdResult =
            equalCodePoints nfkd1 nfkd &&
            equalCodePoints nfkd2 nfkd &&
            equalCodePoints nfkd3 nfkd &&
            equalCodePoints nfkd4 nfkd &&
            equalCodePoints nfkd5 nfkd

        #    NFKC
        #      c4 == toNFKC(c1) == toNFKC(c2) == toNFKC(c3) == toNFKC(c4) == toNFKC(c5)
        #
        nfkcResult =
            equalCodePoints nfkc1 nfkc &&
            equalCodePoints nfkc2 nfkc &&
            equalCodePoints nfkc3 nfkc &&
            equalCodePoints nfkc4 nfkc &&
            equalCodePoints nfkc5 nfkc

        time = Utc.deltaAsNanos start stop |> Num.toStr
        if nfcResult && nfdResult && nfkdResult && nfkcResult then
            Stdout.line "Test \$(Num.toStr index) complete in \$(time)"
        else
            sourceStr = Normalization.showCodePoints source |> Inspect.toStr
            nfcStr = Normalization.showCodePoints nfc |> Inspect.toStr
            nfc1Str = Normalization.showCodePoints nfc1 |> Inspect.toStr
            nfc2Str = Normalization.showCodePoints nfc2 |> Inspect.toStr
            nfc3Str = Normalization.showCodePoints nfc3 |> Inspect.toStr
            nfc4Str = Normalization.showCodePoints nfc4 |> Inspect.toStr
            nfkcStr = Normalization.showCodePoints nfkc |> Inspect.toStr
            nfc5Str = Normalization.showCodePoints nfc5 |> Inspect.toStr

            nfdStr = Normalization.showCodePoints nfd |> Inspect.toStr
            nfd1Str = Normalization.showCodePoints nfd1 |> Inspect.toStr
            nfd2Str = Normalization.showCodePoints nfd2 |> Inspect.toStr
            nfd3Str = Normalization.showCodePoints nfd3 |> Inspect.toStr
            nfd4Str = Normalization.showCodePoints nfd4 |> Inspect.toStr
            nfkdStr = Normalization.showCodePoints nfkd |> Inspect.toStr
            nfd5Str = Normalization.showCodePoints nfd5 |> Inspect.toStr

            nfkd1Str = Normalization.showCodePoints nfkd1 |> Inspect.toStr
            nfkd2Str = Normalization.showCodePoints nfkd2 |> Inspect.toStr
            nfkd3Str = Normalization.showCodePoints nfkd3 |> Inspect.toStr
            nfkd4Str = Normalization.showCodePoints nfkd4 |> Inspect.toStr
            nfkd5Str = Normalization.showCodePoints nfkd5 |> Inspect.toStr

            nfkc1Str = Normalization.showCodePoints nfkd1 |> Inspect.toStr
            nfkc2Str = Normalization.showCodePoints nfkd2 |> Inspect.toStr
            nfkc3Str = Normalization.showCodePoints nfkd3 |> Inspect.toStr
            nfkc4Str = Normalization.showCodePoints nfkd4 |> Inspect.toStr
            nfkc5Str = Normalization.showCodePoints nfkd5 |> Inspect.toStr

            nfcResultStr =
                if nfcResult then
                    "NFC test passed."
                else
                    "NFC test failed.\\nSource     : \$(sourceStr)\\nNFC        : \$(nfcStr)\\nSource->NFC: \$(nfc1Str)\\nNFC->NFC   : \$(nfc2Str)\\nNFD->NFC   : \$(nfc3Str)\\nNFKC       : \$(nfkcStr)\\nNFKC->NFC  : \$(nfc4Str)\\nNFKD->NFC  : \$(nfc5Str)\\n"

            nfdResultStr =
                if nfdResult then
                    "NFD test passed"
                else
                    "NFD test failed.\\nSource     : \$(sourceStr)\\nNFD        : \$(nfdStr)\\nSource->NFD: \$(nfd1Str)\\nNFC->NFD   : \$(nfd2Str)\\nNFD->NFD   : \$(nfd3Str)\\nNFKD       : \$(nfkdStr)\\nNFKD->NFD  : \$(nfd4Str)\\nNFKC->NFD  : \$(nfd5Str)\\n"

            nfkdResultStr =
                if nfdResult then
                    "NFKD test passed"
                else
                    "NFKD test failed.\\nSource     : \$(sourceStr)\\nNFKD        : \$(nfkdStr)\\nSource->NFKD: \$(nfkd1Str)\\nNFC->NFKD   : \$(nfkd2Str)\\nNFD->NFKD   : \$(nfkd3Str)\\nNFKD->NFKD  : \$(nfkd4Str)\\nNFKC->NFKD  : \$(nfkd5Str)\\n"

            nfkcResultStr =
                if nfdResult then
                    "NFKC test passed"
                else
                    "NFKC test failed.\\nSource     : \$(sourceStr)\\nNFKC        : \$(nfkcStr)\\nSource->NFKC: \$(nfkc1Str)\\nNFC->NFKC   : \$(nfkc2Str)\\nNFD->NFKC   : \$(nfkc3Str)\\nNFKD->NFKC  : \$(nfkc4Str)\\nNFKC->NFKC  : \$(nfkc5Str)\\n"

            Stdout.line! "=== Test \$(Num.toStr index) failed.\\n\$(nfcResultStr)\\n\$(nfdResultStr)\\n\$(nfkdResultStr)\\n\$(nfkcResultStr)"


    tests = [$(tests)]

    main =


        Task.forEach tests doTest


    """

TestData : {source: List U32, nfc: List U32, nfd: List U32, nfkd: List U32, nfkc: List U32}

makeNfcTest : TestData, U64 -> Str
makeNfcTest = \data, index ->
    """
        ($(Num.toStr (index + 44)), $(Inspect.toStr data)),
    """

parseLine : Str -> Result TestData [Comment]
parseLine = \str ->
    when Helpers.startsWithHex str is
      Err _ -> Err Comment
      Ok s ->
        when Str.split s ";" is
            [sourceStr, nfcStr, nfdStr, nfkcStr, nfkdStr, ..] ->
                source = Str.split sourceStr " " |> List.map Helpers.hexStrToU32
                nfc = Str.split nfcStr " " |> List.map Helpers.hexStrToU32
                nfd = Str.split nfdStr " " |> List.map Helpers.hexStrToU32
                nfkc = Str.split nfkcStr " " |> List.map Helpers.hexStrToU32
                nfkd = Str.split nfkdStr " " |> List.map Helpers.hexStrToU32
                Ok {source, nfc, nfd, nfkd, nfkc}
            _ -> Err Comment

take : List a, U64 -> List a
take = \in, count ->
    takeHelper in count []

takeHelper : List a, U64, List a -> List a
takeHelper =\in, count, out ->
    when in is
    [] -> out
    _ if count <= 0 -> out
    [first, .. as rest] -> takeHelper rest (count - 1) (List.append out first)


tests = file |> Str.trim |> Str.split "\n" |> List.keepOks parseLine |> take 100 |> List.mapWithIndex makeNfcTest |> Str.joinWith "\n"

main =


    when Arg.list! {} |> List.get 1 is
        Err _ -> Task.err (InvalidArguments "USAGE: roc run InternalNormalizationTestGen.roc -- path/to/package/")
        Ok arg -> File.writeUtf8 "$(Helpers.removeTrailingSlash arg)/InternalNormalizationTest.roc" template
